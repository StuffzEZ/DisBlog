name: DisBlog

on:
  discussion:
    types: [created]

permissions:
  contents: write
  discussions: read

jobs:
  create-post:
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
        
      - name: Extract Discussion Data
        id: discussion
        run: |
          # Extract data from the webhook payload
          title=$(echo '${{ github.event.discussion.title }}' | sed 's/"/\\"/g')
          content='${{ github.event.discussion.body }}'
          number="${{ github.event.discussion.number }}"
          
          # Convert markdown to HTML using a comprehensive approach
          html_content=$(echo "$content" | awk '
          BEGIN {
            in_code_block = 0
            in_list = 0
          }
          
          # Handle code blocks
          /^```/ {
            if (in_code_block == 0) {
              in_code_block = 1
              print "<pre><code>"
              next
            } else {
              in_code_block = 0
              print "</code></pre>"
              next
            }
          }
          
          # Skip processing if in code block
          in_code_block == 1 {
            print $0
            next
          }
          
          # Handle headers
          /^### / {
            gsub(/^### /, "")
            print "<h3>" $0 "</h3>"
            next
          }
          /^## / {
            gsub(/^## /, "")
            print "<h2>" $0 "</h2>"
            next
          }
          /^# / {
            gsub(/^# /, "")
            print "<h1>" $0 "</h1>"
            next
          }
          
          # Handle task lists
          /^- \[ \]/ {
            gsub(/^- \[ \] /, "")
            if (in_list == 0) {
              print "<ul class=\"task-list\">"
              in_list = 1
            }
            print "<li class=\"task-list-item\"><input type=\"checkbox\" disabled> " $0 "</li>"
            next
          }
          /^- \[x\]/ {
            gsub(/^- \[x\] /, "")
            if (in_list == 0) {
              print "<ul class=\"task-list\">"
              in_list = 1
            }
            print "<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> " $0 "</li>"
            next
          }
          
          # Handle unordered lists
          /^- / {
            gsub(/^- /, "")
            if (in_list == 0) {
              print "<ul>"
              in_list = 2
            }
            print "<li>" $0 "</li>"
            next
          }
          
          # Handle ordered lists
          /^[0-9]+\. / {
            gsub(/^[0-9]+\. /, "")
            if (in_list == 0) {
              print "<ol>"
              in_list = 3
            }
            print "<li>" $0 "</li>"
            next
          }
          
          # Close lists when encountering non-list content
          in_list > 0 && !/^- / && !/^[0-9]+\. / && !/^- \[/ {
            if (in_list == 1) print "</ul>"
            else if (in_list == 2) print "</ul>"
            else if (in_list == 3) print "</ol>"
            in_list = 0
          }
          
          # Handle links [text](url)
          {
            gsub(/\[([^\]]+)\]\(([^)]+)\)/, "<a href=\"\\2\">\\1</a>")
          }
          
          # Handle bold **text**
          {
            gsub(/\*\*([^*]+)\*\*/, "<strong>\\1</strong>")
          }
          
          # Handle italic *text*
          {
            gsub(/\*([^*]+)\*/, "<em>\\1</em>")
          }
          
          # Handle inline code `code`
          {
            gsub(/`([^`]+)`/, "<code>\\1</code>")
          }
          
          # Handle line breaks (empty lines become paragraph breaks)
          /^$/ {
            print "<br>"
            next
          }
          
          # Regular text - wrap in paragraph if not already in HTML tags
          !/^</ {
            print "<p>" $0 "</p>"
            next
          }
          
          # Default: print as is
          {
            print $0
          }
          
          END {
            # Close any remaining lists
            if (in_list == 1) print "</ul>"
            else if (in_list == 2) print "</ul>"
            else if (in_list == 3) print "</ol>"
            if (in_code_block == 1) print "</code></pre>"
          }
          ')
          
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$html_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "number=$number" >> $GITHUB_OUTPUT
            
      - name: Create post from template
        env:
          GIST_URL: ${{ vars.TEMPLATE_GIST_URL }}  # You'll need to set this as a repository variable
          BLOG_NAME: ${{ vars.BLOG_NAME }}  # You'll need to set this as a repository variable
        run: |
          # Create posts directory if it doesn't exist
          mkdir -p posts
          
          # Download the template from the gist
          # Assuming the gist URL is in the format: https://gist.githubusercontent.com/username/gist_id/raw/template.html
          curl -s "$GIST_URL" -o template.html
          
          # Read the template file
          template_content=$(cat template.html)
          
          # Get the discussion data from the previous step
          title="${{ steps.discussion.outputs.title }}"
          content="${{ steps.discussion.outputs.content }}"
          number="${{ steps.discussion.outputs.number }}"
          
          # Get repository info
          repo_path="${{ github.repository }}"
          blog_name="$BLOG_NAME"
          
          # Escape special characters for sed (more reliable approach)
          escaped_title=$(printf '%s\n' "$title" | sed 's/[/]/\\&/g' | sed 's/&/\\&/g')
          escaped_blog_name=$(printf '%s\n' "$blog_name" | sed 's/[/]/\\&/g' | sed 's/&/\\&/g')
          escaped_repo_path=$(printf '%s\n' "$repo_path" | sed 's/[/]/\\&/g' | sed 's/&/\\&/g')
          
          # Replace placeholders in the template step by step
          echo "$template_content" | sed "s|{{ discussion\.title }}|$escaped_title|g" > temp_template.html
          
          # Replace the discussion.id placeholder with the discussion number
          sed "s|{{ discussion\.id }}|$number|g" temp_template.html > temp_template2.html
          
          # Replace blog.name with the blog name from variables
          sed "s|{{ blog\.name }}|$escaped_blog_name|g" temp_template2.html > temp_template3.html
          
          # Replace repo.path with the repository path (owner/repo)
          sed "s|{{ repo\.path }}|$escaped_repo_path|g" temp_template3.html > temp_template4.html
          
          # For content replacement, use a more robust approach
          # Create the final file by replacing the content placeholder
          awk -v content="$content" '{
            gsub(/\{\{ discussion\.content \}\}/, content)
            print
          }' temp_template4.html > "posts/${number}.html"
          
          # Clean up temporary files
          rm template.html temp_template.html temp_template2.html temp_template3.html temp_template4.html
          
      - name: Commit and push new post
        run: |
          git config --local user.email "disblog-bot@noreply.github.com"
          git config --local user.name "DisBlog Bot Bot"
          git add posts/${{ steps.discussion.outputs.number }}.html
          git commit -m "[DISBLOG] üìù Add blog post from discussion #${{ steps.discussion.outputs.number }}: ${{ steps.discussion.outputs.title }}" || exit 0
          git push
